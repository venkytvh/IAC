AWSTemplateFormatVersion: '2010-09-09' 
Description: This template is all about ec2 instance creation with parameter and install grafana and prometheus server public or private subnet 
Parameters:
  NameOfService:
    Description: The name of the service this stack is to be used for.
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access into the server
    Type: AWS::EC2::KeyPair::KeyName
  SecurityGroupName:
    Description: SecurityGroupName
    Type: String
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m4.16xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  VPCParameter:
    Description: select the valid VPC
    Type: AWS::EC2::VPC::Id
  SubnetParameter:
    Description: Select the subent private or public
    Type: AWS::EC2::Subnet::Id
Mappings:
  RegionMap:
    ap-south-1:
      AMI: ami-0002bdad91f793433
    us-west-1:
      AMI: ami-bf5540df
    eu-west-2:
      AMI: ami-083969e468da8ef33
    ap-southeast-1:
      AMI: ami-e2adf99e
    ap-southeast-2:
      AMI: ami-43874721
Resources:
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceTypeParameter
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - AMI
      SecurityGroupIds:
      - Ref: MySecurityGroup
      SubnetId:
        Ref: SubnetParameter
      Tags:
      - Key: Name
        Value:
          Ref: NameOfService
      KeyName:
        Ref: KeyName
      UserData:
        !Base64 | 
          #!/bin/bash -xe
          yum update -y 
          echo "[grafana]
          name=grafana
          baseurl=https://packages.grafana.com/oss/rpm
          repo_gpgcheck=1
          enabled=1
          gpgcheck=1
          gpgkey=https://packages.grafana.com/gpg.key
          sslverify=1
          sslcacert=/etc/pki/tls/certs/ca-bundle.crt" >> /etc/yum.repos.d/grafana.repo
          yum install grafana -y 
          systemctl daemon-reload
          systemctl start grafana-server
          systemctl status grafana-server
          systemctl enable grafana-server.service
          wget https://github.com/prometheus/prometheus/releases/download/v2.24.0/prometheus-2.24.0.linux-amd64.tar.gz
          tar -xvf prometheus-2.24.0.linux-amd64.tar.gz
          mv prometheus-2.24.0.linux-amd64 prometheus-files
          useradd --no-create-home --shell /bin/false prometheus
          mkdir /etc/prometheus
          mkdir /var/lib/prometheus
          chown prometheus:prometheus /etc/prometheus
          chown prometheus:prometheus /var/lib/prometheus
          cp prometheus-files/prometheus /usr/local/bin/
          cp prometheus-files/promtool /usr/local/bin/
          chown prometheus:prometheus /usr/local/bin/prometheus
          chown prometheus:prometheus /usr/local/bin/promtool
          cp -r prometheus-files/consoles /etc/prometheus
          cp -r prometheus-files/console_libraries /etc/prometheus
          chown -R prometheus:prometheus /etc/prometheus/consoles
          chown -R prometheus:prometheus /etc/prometheus/console_libraries
          echo "
          global:
            scrape_interval: 10s
          
          scrape_configs:
            - job_name: 'prometheus'
              scrape_interval: 5s
              static_configs:
                - targets: ['localhost:9090'] " >> /etc/prometheus/prometheus.yml
          chown prometheus:prometheus /etc/prometheus/prometheus.yml
          echo " 
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target
          
          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/prometheus \
              --config.file /etc/prometheus/prometheus.yml \
              --storage.tsdb.path /var/lib/prometheus/ \
              --web.console.templates=/etc/prometheus/consoles \
              --web.console.libraries=/etc/prometheus/console_libraries
          
          [Install]
          WantedBy=multi-user.target " >> /etc/systemd/system/prometheus.service
          systemctl daemon-reload
          systemctl start prometheus
          systemctl status prometheus
          systemctl enable prometheus
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId:
        Ref: VPCParameter
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 13.234.244.34/32
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 13.234.244.34/32
      - IpProtocol: tcp
        FromPort: '3000'
        ToPort: '3000'
        CidrIp: 13.234.244.34/32
      - IpProtocol: tcp
        FromPort: '9090'
        ToPort: '9090'
        CidrIp: 13.234.244.34/32
      Tags:
      - Key: Name
        Value:
          Ref: SecurityGroupName
Outputs:
  ServerDns:
    Value:
      Fn::GetAtt:
      - Ec2Instance
      - PublicDnsName
  SecurityGroupID:
    Value:
      Fn::GetAtt:
      - MySecurityGroup
      - GroupId
